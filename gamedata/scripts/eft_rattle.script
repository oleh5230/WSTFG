local opt_aim_rattle = true
local opt_lower_raise_rattle = true
local volume_aim_rattle = 1
local volume_lower_raise_rattle = 1

function load_settings()
    if ui_mcm then
        opt_aim_rattle = ui_mcm.get("grok_casings_sounds/enabled_aim_rattle") or false
        opt_lower_raise_rattle = ui_mcm.get("grok_casings_sounds/enabled_lower_raise_rattle") or false
        volume_aim_rattle = ui_mcm.get("grok_casings_sounds/volume_aim_rattle") or 1
        volume_lower_raise_rattle = ui_mcm.get("grok_casings_sounds/volume_lower_raise_rattle") or 1
    end
end

-- oleh5230, 24.06.2024:
-- volume and tempo depends on weapon weight
-- removed redundant code

-- oleh5230, 04.09.2024:
-- tempo depends on aim time
-- some small tweaks

-- oleh5230, 16.10.2024:
-- reworked MCM settings

local cache = 0
function play_aim_sound(dir, name, volume, frequency)
    -- local player = db.actor
    -- if not (player and player:alive()) then return end

    -- local ct = time_global()
    -- if not tm or ct > tm then
        -- local list = getFS():file_list_open("$game_sounds$", dir, bit_or(FS.FS_ListFiles, FS.FS_RootOnly)) -- Perhaps cache the result...?
        -- printf("%s", list:Size())
        -- if list then
            local roll = math.random(8)
            if cache == roll then roll = math.random(8) end
            cache = roll

            local sound = xr_sound.get_safe_sound_object(dir .. name .. roll) --list:Size()
            sound:play(db.actor, 0, sound_object.s2d)
            sound.volume = volume or 0.5
            sound.frequency = frequency or 1
            --printf("eft_rattle.script // volume: %s frequency: %s, roll: %s", volume, frequency, roll)
            -- tm = ct + 175
        -- end
    -- end
end

local cached_wpn
function get_wpn_params(wpn)
    if not wpn then return 0.5, 1 end
    wpn = wpn:section()
    if not cached_wpn or wpn ~= cached_wpn then
        cached_wpn = wpn
        weight     = ini_sys:r_string_ex(wpn, "inv_weight") or 3.5
        aim_time   = ini_sys:r_string_ex(wpn, "zoom_rotate_time") or 0.25
        volume     = (0.5 + weight*0.05) -- ini_sys:r_string_ex(wpn, "bullet_bones") and (1.25 + weight*0.05) or 
        frequency  = 1.35 - aim_time --0.275 / aim_time
        if frequency < 0.77 then frequency = 0.77 end
        --if frequency > 1.33 then frequency = 1.33 end
    end
    return volume, frequency
end

function actor_on_weapon_zoom_in(wpn)
    if opt_aim_rattle then
        local volume, frequency = get_wpn_params(wpn)
        play_aim_sound("rattle\\raise\\", "raise_", volume * volume_aim_rattle, frequency) --"weapons\\rattle\\aimin\\", "aim_in_"
    end
end

function actor_on_weapon_zoom_out(wpn)
    if opt_aim_rattle then
        local volume, frequency = get_wpn_params(wpn)
        play_aim_sound("rattle\\lower\\", "lower_", volume * volume_aim_rattle, frequency) --"weapons\\rattle\\aimout\\", "aim_out_"
    end
end

function actor_on_weapon_zoom_type_changed(wpn, previous, current)
    if opt_aim_rattle then
        if previous ~= 2 and current == 0 or current == 1 then
            if axr_main.weapon_is_zoomed then
                local volume, frequency = get_wpn_params(wpn)
                play_aim_sound("rattle\\raise\\", "raise_", volume * volume_aim_rattle * 0.5, frequency)
            end
        else
            local volume, frequency = get_wpn_params(wpn)
            play_aim_sound("rattle\\lower\\", "lower_", volume * volume_aim_rattle * 0.5, frequency)
        end
    end
end

function actor_on_weapon_raise(wpn)
    if opt_lower_raise_rattle then
        local volume, frequency = get_wpn_params(wpn)
        play_aim_sound("rattle\\raise\\", "raise_", volume * volume_lower_raise_rattle, 1.1)
    end
end

function actor_on_weapon_lower(wpn)
    if opt_lower_raise_rattle then
        local volume, frequency = get_wpn_params(wpn)
        play_aim_sound("rattle\\lower\\", "lower_", volume * volume_lower_raise_rattle, 1.1)
    end
end

function on_game_start()
    RegisterScriptCallback("actor_on_weapon_zoom_in", actor_on_weapon_zoom_in)
    RegisterScriptCallback("actor_on_weapon_zoom_out", actor_on_weapon_zoom_out)
    RegisterScriptCallback("actor_on_weapon_zoom_type_changed", actor_on_weapon_zoom_type_changed)
    RegisterScriptCallback("actor_on_weapon_raise", actor_on_weapon_raise)
    RegisterScriptCallback("actor_on_weapon_lower", actor_on_weapon_lower)
    RegisterScriptCallback("on_option_change", load_settings)
    load_settings()
end